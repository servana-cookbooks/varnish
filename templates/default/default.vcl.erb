backend appserver {
	.host = "<%= node['varnish']['backend_host'] %>";
	.port = "<%= node['varnish']['backend_port'] %>";
  .first_byte_timeout = <%= node['varnish']['timeout'] %>; 
  #.probe = { .url = "/heartbeat"; .interval = 5s; .timeout = 1s; .window = 5;.threshold = 3; }
}

acl purge_acl {
        "localhost";
        "127.0.0.1";
}


sub vcl_recv {

	 set req.grace = 15s;

	if (req.request == "PURGE")
  {
		if (!client.ip ~ purge_acl)
    {
		    error 405 "Not allowed.";
      }
		return (lookup);
  }

  set req.backend=appserver;

  if (req.request == "GET" && req.url ~ "\.(css|js|gif|jpg|jpeg|png|tiff|tif|ico|img)$")
  {
      set req.backend=appserver;
      unset req.http.Cookie;
      unset req.http.Cache-Control;
  }

  if (req.request == "GET" && req.url ~ "\.(html|htm|txt)$")
  {
       set req.backend=appserver;
  }



  /* Keep serving if backend goes down. Unicorn/ Nginx will return a 503 error page if Apache goes down for us */  
  if (!req.backend.healthy) 
  {
    set req.grace = 24h;
  }


  if (req.http.Accept-Encoding) 
  {
    if (req.url ~ "\.(gif|jpg|jpeg|png|tiff|tif|ico|swf)$") 
    {
      unset req.http.Accept-Encoding;
    } 
      elsif (req.http.Accept-Encoding ~ "gzip") 
    {
      set req.http.Accept-Encoding = "gzip";
    } 
      elsif (req.http.Accept-Encoding ~ "deflate") 
    {
      set req.http.Accept-Encoding = "deflate";
    } 
      else 
    {
      # unkown Encoding
      remove req.http.Accept-Encoding;
    }
  }


<% if node['varnish']['lock_down'] %>

#	 if (req.backend==frontend){	
#		 if (req.http.Authorization || req.http.Authenticate){
#			  return (pass);
#		 }
#		 if (! req.http.Authorization ~ "Basic <%=node['varnish']['lock_down']%>")
#    {
#    		error 401 "Restricted";
#     }	
#	 }

<% end %>


}

sub vcl_hit {
	if (req.request == "PURGE")
  {
		purge;
		error 200 "Purged.";
	}
}

sub vcl_miss {
	if (req.request == "PURGE")
  {
		purge;
		error 200 "Purged.";
	}
}

sub vcl_fetch {

  #keep all items in cache for 30 min longer
  set beresp.grace = 6h;

  if (req.url ~ "\.(html|htm|jpg|jpeg|gif|png|ico|css|js|flv)$") 
  {
        unset beresp.http.Set-Cookie;
        set beresp.http.Cache-Control = "max-age = 3600";
        set beresp.ttl = 24h;
        set beresp.http.X-Cacheable = "YES:Cacheable";
  }

  if (req.url ~ "\.(html|htm|jpg|jpeg|gif|png|ico|css)$") 
  {
        set beresp.http.Cache-Control = "max-age = 3600";
  }

  unset beresp.http.Server;
  unset beresp.http.Date;
  unset beresp.http.Expires;
  unset beresp.http.Last-Modified;

  if (!beresp.ttl > 0s) 
  {
        #set beresp.cacheable = true;
        unset beresp.http.expires;
        # set beresp.http.Cache-Control = "max-age = 3600";
        # set beresp.ttl = 6h;
        set beresp.http.X-Cacheable = "No:Not Cacheable";
        
        return(deliver);
  }

  if (beresp.ttl < 24h) 
  {
      if (beresp.http.Cache-Control ~ "(private|no-cache|no-store)") 
      {
          set beresp.ttl = 60s;
          set beresp.http.X-Cacheable = "NO:Not Cacheable";   
      }
        else
      {
          // You are extending the lifetime of the object artificially
          set beresp.ttl   = 300s;
          set beresp.grace = 300s;
          set beresp.ttl = 24h;
          set beresp.http.X-Cacheable = "YES:Force Cacheable";
      }
  }

  return(deliver);

}

sub vcl_pipe {
   return (pipe);
}

sub vcl_pass {
   return (pass);
}

sub vcl_deliver {

	if (req.request ~ "OPTIONS") 
  {
		 set resp.status = 200;
		 set resp.response = "OK";
	}

  if (obj.hits > 0) 
  {
    set resp.http.X-Cache = "HIT";
  } 
    else
  {
    set resp.http.X-Cache = "MISS";
  }
	
	set resp.http.Access-Control-Allow-Origin = "*";
	set resp.http.Access-Control-Allow-Methods = "GET, POST, PUT, DELETE";
	set resp.http.Access-Control-Allow-Headers = "Origin, Accept, Content-Type, X-Requested-With, X-CSRF-Token";

	return (deliver);
}

sub vcl_error {
	
 if (obj.status == 401) {
	  set obj.http.Content-Type = "text/html; charset=utf-8";
	  set obj.http.WWW-Authenticate = "Basic realm=this is a secured area";
	  synthetic {" 


	 "};
	  return (deliver);
	}
	
}

#########
# These are snippets created that used to be used and might be required
#########

# if (req.request == "GET" && req.url ~ "\.(css|js|html|gif|jpg|jpeg|png|tiff|tif|ico|img)$" ){
#  set req.backend=nginx;
# }

# if (req.request == "GET" && req.url ~ "\/crossdomain\.xml") {
#   set req.backend=nginx;
# }

# if (req.request == "GET" && req.url ~ "(\/|?)$"){
#   set req.backend=nginx;
# }